<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialization
bullet_cooldown = 0;
iframes = 0; //sets up the code to make the player briefly invincible when hit.
draw_check = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Variables
iframes -= 1;
bullet_cooldown -=1;
spd = 1; //speed

if (global.player_health &lt;= 0)
{
    

    game_end(); //closes the game when the player dies
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move + Shoot
script_execute(GetKeyPress); //===My own script, check it.
hsp = d_key - a_key;
vsp = s_key - w_key;


//===Sets speed and direction
if (hsp == 0 &amp;&amp; vsp == 0) {
    spd = 0;
} else {
    direction = point_direction(0, 0, hsp, vsp);
    //image_angle = direction;
    spd = 5;
    hsp += spd*sign(hsp);
    vsp += spd*sign(vsp);
}

//===Applies collision, and speed
//===Horizontal collision
if(place_meeting(x+hsp, y, obj_environment)) { 
    while(!place_meeting(x+sign(hsp), y, obj_environment)){
        x  += sign(hsp);
    }
    hsp = 0;
}
x += hsp;

//===Vertical collision
//===Cool stuff I guess, for some reason sign is like absolute value, it will give 0, 1, or -1
if(place_meeting(x, y+vsp, obj_environment)) { 
    while(!place_meeting(x, y+sign(vsp), obj_environment)){
        y  += sign(vsp);
    }
    vsp = 0;
}
y += vsp;

//===Shooting code.
if(left_key + right_key + up_key + down_key &gt;= 1) {// if any one of those buttons is pressed.
    script_execute(Shooting);
}

/* your stuff Yanni.
if (keyboard_check(vk_left) &amp;&amp; bullet_cooldown &lt;=0) {
    bullet_cooldown = 15;
    bullet = instance_create(x, y, obj_bullet); // creates an instance of bullet with address
    // example use, bullet.x = 5;
    bullet.direction = 180;
    bullet.image_angle = 180;
    image_angle = bullet.image_angle;
    bullet.speed = 15;
    bullet.alignment = 1;
}

if (keyboard_check(vk_right)&amp;&amp; bullet_cooldown &lt;=0) {
    bullet_cooldown = 15;
    bullet = instance_create(x, y, obj_bullet); // creates an instance of bullet with address
    // example use, bullet.x = 5;
    bullet.direction = 0;
    bullet.image_angle = 0;
    image_angle = bullet.image_angle;
    bullet.speed = 15;
    bullet.alignment = 1;
}

if (keyboard_check(vk_up)&amp;&amp; bullet_cooldown &lt;=0) {
    bullet_cooldown = 15;
    bullet = instance_create(x, y, obj_bullet); // creates an instance of bullet with address
    // example use, bullet.x = 5;
    bullet.direction = 90;
    bullet.image_angle = 90;
    image_angle = bullet.image_angle;
    bullet.speed = 15;
    bullet.alignment = 1;
}

if (keyboard_check(vk_down)&amp;&amp; bullet_cooldown &lt;=0) {
    bullet_cooldown = 15;
    bullet = instance_create(x, y, obj_bullet); // creates an instance of bullet with address
    // example use, bullet.x = 5;
    bullet.direction = 270;
    bullet.image_angle = 270;
    image_angle = bullet.image_angle;
    bullet.speed = 15;
    bullet.alignment = 1;
}
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Health Draw
if (draw_check = 1)
    {
    health_tracker = global.player_health;
    with (obj_full_crystal)
        {
        instance_destroy();
        }
    with (obj_half_crystal)
        {
        instance_destroy();
        }
    position_tracker = 1;
    while (health_tracker &gt; 1)
        { 
        instance_create (position_tracker * 32, 32, obj_full_crystal);
        position_tracker ++;
        health_tracker -= 2;
        }
    if (health_tracker = 1)
        {
        instance_create (position_tracker * 32, 32, obj_half_crystal);
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///old movement
/*if (keyboard_check(ord('A')) &amp;&amp; keyboard_check(ord('S')))
{
    direction=225;
    speed=5;
}

else if (keyboard_check(ord('A')) &amp;&amp; keyboard_check(ord('W')))
{
    direction=135;
    speed=5;
}

else if (keyboard_check(ord('D')) &amp;&amp; keyboard_check(ord('W')))
{
    direction=45;
    speed=5;
}

else if (keyboard_check(ord('D')) &amp;&amp; keyboard_check(ord('S')))
{
    direction=315;
    speed=5;
}

else if (keyboard_check(ord('A')))
{
    direction=180;
    speed=5;
}

else if (keyboard_check(ord('D')))
{
    direction=0;
    speed=5;
}

else if (keyboard_check(ord('W')))
{
    direction=90;
    speed=5;
}

else if (keyboard_check(ord('S')))
{
    direction=270;
    speed=5;
}*/

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///old directional firing

/*if (keyboard_check(vk_left) &amp;&amp; bullet_cooldown &lt;=0)
{
bullet_cooldown = 15;
bullet = instance_create(x, y, obj_bullet); // creates an instance of bullet with address
// example use, bullet.x = 5;
bullet.direction = 180;
bullet.image_angle = 180;
bullet.speed = 15;
bullet.alignment = 1;
}

if (keyboard_check(vk_right)&amp;&amp; bullet_cooldown &lt;=0)
{
bullet_cooldown = 15;
bullet = instance_create(x, y, obj_bullet); // creates an instance of bullet with address
// example use, bullet.x = 5;
bullet.direction = 0;
bullet.image_angle = 0;
bullet.speed = 15;
bullet.alignment = 1;
}

if (keyboard_check(vk_up)&amp;&amp; bullet_cooldown &lt;=0)
{
bullet_cooldown = 15;
bullet = instance_create(x, y, obj_bullet); // creates an instance of bullet with address
// example use, bullet.x = 5;
bullet.direction = 90;
bullet.image_angle = 90;
bullet.speed = 15;
bullet.alignment = 1;
}

if (keyboard_check(vk_down)&amp;&amp; bullet_cooldown &lt;=0)
{
bullet_cooldown = 15;
bullet = instance_create(x, y, obj_bullet); // creates an instance of bullet with address
// example use, bullet.x = 5;
bullet.direction = 270;
bullet.image_angle = 270;
bullet.speed = 15;
bullet.alignment = 1;
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
